package com.plr.comparator.whitespace
/*
 * This Spock specification was auto generated by running the Gradle 'init' task
 * by 'plr' at '4/23/16 9:04 PM' with Gradle 2.12
 *
 * @author plr, @date 4/23/16 9:04 PM
 */


import spock.lang.Specification

import com.plr.comparator.whitespace.BeginEndFlexibleComparator.SpaceTrimComparator


class IgnoreSpaceTest extends Specification {



	def "Pure numbers comparison equal"() {

		given:

		InsensitiveComparator insensitiveComparator = InsensitiveComparator.onAllWhiteSpace();
		
		expect:

		insensitiveComparator.compare(smaller, bigger) == 0;

		where:

		smaller 		| bigger
		"a"				| "a"
		"abc"			| "abc"
		"a"				| "a "
		"a "			| "a"
		"abc"	| "abc "
		"a"			| " a "
		"abc"	| " a b   c "
		"  \n   abc  \n"	| " a b   c "
		" "	| ""
		""	| "\n"
	}

	def "Pure numbers comparison smaller"() {

		given:

		InsensitiveComparator insensitiveComparator = InsensitiveComparator.onAllWhiteSpace();

		expect:

		insensitiveComparator.compare(smaller, bigger)  < 0;
		insensitiveComparator.compare(bigger, smaller)  > 0;

		where:

		smaller 		| bigger
		"a"			| "b"
		"ab"		| "abc"
		" ab"		| "abc"
		" a  b "	| "abc"
	}

	def "Space Repetition Insensitive comparison equal"() {

		given:
		InsensitiveComparator insensitiveComparator = InsensitiveComparator.onRepetition();

		expect:

		insensitiveComparator.compare(smaller, bigger) == 0;

		where:

		smaller 		| bigger
		"a"			| "a"
		"abc"	| "abc"
		"ab c"		| "ab   c"
		"b "		| "b\n\n"
		"abc   "	| "abc "
		"   a "		| " a          "
		" "			| "\n\n\n\n\n\n\n\n"
		""			| ""
	}
	
	def "Space Repetition Insensitive comparison smaller greater"() {

		given:
		InsensitiveComparator insensitiveComparator = InsensitiveComparator.onRepetition();
		
		expect:

		insensitiveComparator.compare(smaller, bigger) < 0;
		insensitiveComparator.compare(bigger, smaller) > 0;

		where:

		smaller 		| bigger
		"a"				| "a "
		" c"			| "c"
		"d "			| "d    g"

	}
	
	def "Space Trim Insensitive comparison smaller equal"() {
		
				given:

				InsensitiveComparator insensitiveComparator = InsensitiveComparator.onWhiteSpace().trim();
				
				expect:
		
				insensitiveComparator.compare(smaller, bigger) == 0;
		
				where:
		
				smaller 		| bigger
				"a"				| "a "
				"a"				| " a"
				"a"				| "a      "
				"a"				| "      a"
				"a"				| "   a   "
				"   a   "		| " a"
				""				| " "
				""				| "             "
				"     "			| ""
				" "				| ""
				""				| ""
		
			}
	
	def "Space Trim Insensitive comparison smaller greater"() {
		
				given:
		
				InsensitiveComparator insensitiveComparator = InsensitiveComparator.onWhiteSpace().trim();
				
				expect:
		
				insensitiveComparator.compare(smaller, bigger) < 0;
				insensitiveComparator.compare(bigger, smaller) > 0;
		
				where:
		
				smaller 		| bigger
				"a"				| "ab "
				"a"				| " ab "
				"  asdf"		| " asdfg"
				"d "			| "d    g"
		
			}
}
