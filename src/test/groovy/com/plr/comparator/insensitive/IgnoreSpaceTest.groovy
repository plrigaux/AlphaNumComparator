package com.plr.comparator.insensitive
/*
 * This Spock specification was auto generated by running the Gradle 'init' task
 * by 'plr' at '4/23/16 9:04 PM' with Gradle 2.12
 *
 * @author plr, @date 4/23/16 9:04 PM
 */


import com.plr.comparator.Utils;

import spock.lang.Specification



class IgnoreSpaceTest extends Specification {

	def pure_numbers_comparison_equal() {

		given:

		InsensitiveComparator insensitiveComparator = InsensitiveComparator.onAllWhiteSpace();
		
		expect:

		insensitiveComparator.compare(smaller, bigger) == 0;

		where:

		smaller 		| bigger
		"a"				| "a"
		"abc"			| "abc"
		"a"				| "a "
		"a "			| "a"
		"abc"			| "abc "
		"a"				| " a "
		"abc"			| " a b   c "
		"  \n   abc  \n"	| " a b   c "
		" "				| ""
		""				| "\n"
	}

	def pure_numbers_comparison_smaller() {

		given:

		InsensitiveComparator insensitiveComparator = InsensitiveComparator.onAllWhiteSpace();

		expect:

		insensitiveComparator.compare(smaller, bigger)  < 0;
		insensitiveComparator.compare(bigger, smaller)  > 0;

		where:

		smaller 		| bigger
		"a"			| "b"
		"ab"		| "abc"
		" ab"		| "abc"
		" a  b "	| "abc"
	}

	def Space_Repetition_Insensitive_comparison_equal() {

		given:
		InsensitiveComparator insensitiveComparator = InsensitiveComparator.onWhiteSpaceRepetition();

		expect:

		insensitiveComparator.compare(smaller, bigger) == 0;

		where:

		smaller 		| bigger
		"a"			| "a"
		"abc"	| "abc"
		"ab c"		| "ab   c"
		"b "		| "b\n\n"
		"abc   "	| "abc "
		"   a "		| " a          "
		" "			| "\n\n\n\n\n\n\n\n"
		""			| ""
	}
	
	def Space_Repetition_Insensitive_comparison_smaller_greater() {

		given:
		InsensitiveComparator insensitiveComparator = InsensitiveComparator.onWhiteSpaceRepetition();
		
		expect:

		insensitiveComparator.compare(smaller, bigger) < 0;
		insensitiveComparator.compare(bigger, smaller) > 0;

		where:

		smaller 		| bigger
		"a"				| "a "
		" c"			| "c"
		"d "			| "d    g"

	}
	
	def Space_Trim_Insensitive_comparison_smaller_equal() {

		given:

		InsensitiveComparator insensitiveComparator = InsensitiveComparator.onNothing().trim();

		expect:

		insensitiveComparator.compare(smaller, bigger) == 0;

		where:

		smaller 		| bigger
		"a"				| "a "
		"a"				| " a"
		"a"				| "a      "
		"a"				| "      a"
		"a"				| "   a   "
		"   a   "		| " a"
		""				| " "
		""				| "             "
		"     "			| ""
		" "				| ""
		""				| ""
	}

	def Space_Trim_Insensitive_comparison_smaller_greater() {

		given:

		Comparator<CharSequence> insensitiveComparator = InsensitiveComparator.onNothing().trim();

		expect:

		insensitiveComparator.compare(smaller, bigger) < 0;
		insensitiveComparator.compare(bigger, smaller) > 0;

		where:

		smaller 		| bigger
		"a"				| "ab "
		"a"				| " ab "
		"  asdf"		| " asdfg"
		"d "			| "d    g"
		" d   "			| "e    "
		
		
	}

	def Space_Left_Trim_Insensitive_comparison_smaller_equal() {

		given:

		InsensitiveComparator insensitiveComparator = InsensitiveComparator.onNothing().leftTrim();

		expect:

		insensitiveComparator.compare(smaller, bigger) == 0;

		where:

		smaller 		| bigger
		"a"				| " a"
		"a"				| "      a"
		"a   "			| "   a   "
		" a"      		| "a"		
		"      a"       | "a"		
		"   a   "       | "a   "	
		
	}

	def Space_Left_Insensitive_comparison_smaller_greater() {

		given:

		Comparator<CharSequence> insensitiveComparator = InsensitiveComparator.onNothing().leftTrim();

		expect:

		insensitiveComparator.compare(smaller, bigger) < 0;
		insensitiveComparator.compare(bigger, smaller) > 0;

		where:

		smaller 		| bigger
		"a"				| "ab "
		"a"				| " ab "
		"  asdf"		| " asdfg"
		"d "			| "d    g"
		" d   "			| "e    "
	}



	def Space_Right_Trim_Insensitive_comparison_smaller_equal() {

		given:

		InsensitiveComparator insensitiveComparator = InsensitiveComparator.onNothing().rightTrim();

		expect:

		insensitiveComparator.compare(smaller, bigger) == 0;

		where:

		smaller 		| bigger
		"a"				| "a "
		"a"				| "a      "
		"   a"			| "   a   "
		" a   " 		| " a"
		""				| " "
		""				| "             "
		"     "			| ""
		" "				| ""
		""				| ""
	}

	def Space_Right_Trim_Insensitive_comparison_smaller_greater() {

		given:

		Comparator<CharSequence> insensitiveComparator = InsensitiveComparator.onNothing().rightTrim();

		expect:

		insensitiveComparator.compare(smaller, bigger) < 0;
		insensitiveComparator.compare(bigger, smaller) > 0;

		where:

		smaller 		| bigger
		"a"				| "ab "
		" ac "			| "a"
		"  asdf"		| " asdfg"
		"d "			| "d    g"
		" d   "			| "e    "
	}
	
}
