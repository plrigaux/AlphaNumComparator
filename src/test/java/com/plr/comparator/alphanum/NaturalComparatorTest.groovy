package com.plr.comparator.alphanum
/*
 * This Spock specification was auto generated by running the Gradle 'init' task
 * by 'plr' at '4/23/16 9:04 PM' with Gradle 2.12
 *
 * @author plr, @date 4/23/16 9:04 PM
 */

import spock.lang.Specification
import static com.plr.comparator.alphanum.CompType.*

class NaturalComparatorTest extends Specification {




	def "Mutiple cases of parser"() {

		given:
		NaturalComparator naturalComparator = new NaturalComparator();
		def list = naturalComparator.split(first)

		println "$first -> $list"

		expect:



		list.size() >= 0


		where:

		first 			| second 		| comparison
		"doc20.doc" 	| "doc10.doc" 	| GREATER
		"doc10.doc"		| "doc20.doc" 	| LESS
		"doc2.doc"		| "doc10.doc" 	| LESS
		"doc2.1.doc"	| "doc2.2.doc"	| LESS
		"doc2.10.doc"	| "doc2.2.doc"	| GREATER
		"20"	| "10"	| GREATER
		"2"	| "10"	| LESS
		"-20"	| "10"	| LESS
		"-20"	| "-10"	| LESS
		"-20.234"	| "-10"	| LESS
		"asdf-20.234"	| "-10"	| LESS
		"asdf-20.234asdf"	| "-10"	| LESS
		"TEST20.23.4.8asdf"	| "-10"	| LESS
		"TEST20-23-4-8asdf"	| "-10"	| LESS
		"TEST20-23-4-8asdf"	| "-10"	| LESS
		"03.50"	| "-10"	| LESS
		"00003"	| "-10"	| LESS
		"0.3000"	| "-10"	| LESS
	}

	def "test sort list" () {
		given:
		NaturalComparator naturalComparator = new NaturalComparator();


		def list = [
			"z1.doc",
			"z10.doc",
			"z100.doc",
			"z101.doc",
			"z102.doc",
			"z11.doc",
			"z12.doc",
			"z13.doc",
			"z14.doc",
			"z15.doc",
			"z16.doc",
			"z17.doc",
			"z18.doc",
			"z19.doc",
			"z2.doc",
			"z20.doc",
			"z3.doc",
			"z4.doc",
			"z5.doc",
			"z6.doc",
			"z7.doc",
			"z8.doc",
			"z9.doc",
		]

		def expected = [
			"z1.doc",
			"z2.doc",
			"z3.doc",
			"z4.doc",
			"z5.doc",
			"z6.doc",
			"z7.doc",
			"z8.doc",
			"z9.doc",
			"z10.doc",
			"z11.doc",
			"z12.doc",
			"z13.doc",
			"z14.doc",
			"z15.doc",
			"z16.doc",
			"z17.doc",
			"z18.doc",
			"z19.doc",
			"z20.doc",
			"z100.doc",
			"z101.doc",
			"z102.doc",
		]



		when: "Do nothing"

		then: "The list aren't equal"
		list != expected

		when: "Sorting list"
		Collections.sort(list, naturalComparator)

		then: "The list are equal"
		list == expected
	}


	def "product names sort"() {
		given:

		NaturalComparator naturalComparator = new NaturalComparator();

		def list = [
			"1000X Radonius Maximus",
			"10X Radonius",
			"200X Radonius",
			"20X Radonius",
			"20X Radonius Prime",
			"30X Radonius",
			"40X Radonius",
			"Allegia 50 Clasteron",
			"Allegia 500 Clasteron",
			"Allegia 50B Clasteron",
			"Allegia 51 Clasteron",
			"Allegia 6R Clasteron",
			"Alpha 100",
			"Alpha 2",
			"Alpha 200",
			"Alpha 2A",
			"Alpha 2A-8000",
			"Alpha 2A-900",
			"Callisto Morphamax",
			"Callisto Morphamax 500",
			"Callisto Morphamax 5000",
			"Callisto Morphamax 600",
			"Callisto Morphamax 6000 SE",
			"Callisto Morphamax 6000 SE2",
			"Callisto Morphamax 700",
			"Callisto Morphamax 7000",
			"Xiph Xlater 10000",
			"Xiph Xlater 2000",
			"Xiph Xlater 300",
			"Xiph Xlater 40",
			"Xiph Xlater 5",
			"Xiph Xlater 50",
			"Xiph Xlater 500",
			"Xiph Xlater 5000",
			"Xiph Xlater 58"
		]

		def expected = [
			"10X Radonius",
			"20X Radonius",
			"20X Radonius Prime",
			"30X Radonius",
			"40X Radonius",
			"200X Radonius",
			"1000X Radonius Maximus",
			"Allegia 6R Clasteron",
			"Allegia 50 Clasteron",
			"Allegia 50B Clasteron",
			"Allegia 51 Clasteron",
			"Allegia 500 Clasteron",
			"Alpha 2",
			"Alpha 2A",
			"Alpha 2A-900",
			"Alpha 2A-8000",
			"Alpha 100",
			"Alpha 200",
			"Callisto Morphamax",
			"Callisto Morphamax 500",
			"Callisto Morphamax 600",
			"Callisto Morphamax 700",
			"Callisto Morphamax 5000",
			"Callisto Morphamax 6000 SE",
			"Callisto Morphamax 6000 SE2",
			"Callisto Morphamax 7000",
			"Xiph Xlater 5",
			"Xiph Xlater 40",
			"Xiph Xlater 50",
			"Xiph Xlater 58",
			"Xiph Xlater 300",
			"Xiph Xlater 500",
			"Xiph Xlater 2000",
			"Xiph Xlater 5000",
			"Xiph Xlater 10000"
		]

		when: "Do nothing"

		then: "The list aren't equal"
		list != expected

		when: "Sorting list"
		Collections.sort(list, naturalComparator)

		then: "The list are equal"
		list == expected
	}

	def "Mutiple cases sdfa"() {

		given:
		NaturalComparator naturalComparator = new NaturalComparator();
		def expected = [
			"1-2",
			"1-02",
			"1-20",
			"10-20",
			"fred",
			"jane",
			"pic01",
			"pic2",
			"pic02",
			"pic02a",
			"pic3",
			"pic4",
			"pic 4 else",
			"pic 5",
			"pic05",
			"pic 5",
			"pic 5 something",
			"pic 6",
			"pic   7",
			"pic100",
			"pic100a",
			"pic120",
			"pic121",
			"pic02000",
			"tom",
			"x2-g8",
			"x2-y7",
			"x2-y08",
			"x8-y8"
		]


		def list = []

		list.addAll(expected)


		Collections.shuffle(list)

		when: "Do nothing"

		then: "The list aren't equal"
		list != expected

		when: "Sorting list"
		Collections.sort(list, naturalComparator)

		then: "The list are equal"
		list == expected
	}

	boolean compToZero(NaturalComparator naturalComparator, CharSequence s1, CharSequence s2, CompType compType) {

		int val = naturalComparator.compare(s1, s2)

		switch (compType) {
			case GREATER:
				return val > 0
			case LESS:
				return val < 0
			case EQUAL:
				return val == 0
		}
	}

	def "Mutiple cases"() {

		given:
		NaturalComparator naturalComparator = new NaturalComparator();

		expect:

		compToZero (naturalComparator, first, second, comparison) == true

		where:

		first 			| second 		| comparison
		"doc20.doc" 	| "doc10.doc" 	| GREATER
		"doc10.doc"		| "doc20.doc" 	| LESS
		"doc2.doc"		| "doc10.doc" 	| LESS
		"doc2.1.doc"	| "doc2.2.doc"	| LESS
		"doc2.10.doc"	| "doc2.2.doc"	| GREATER
		"20"	| "10"	| GREATER
		"2"	| "10"	| LESS
		"-20"	| "10"	| LESS
		"-20"	| "-10"	| LESS
	}
}
